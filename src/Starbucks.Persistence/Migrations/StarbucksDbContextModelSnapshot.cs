// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Starbucks.Persistence;

#nullable disable

namespace Starbucks.Persistence.Migrations
{
    [DbContext(typeof(StarbucksDbContext))]
    partial class StarbucksDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Starbucks.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IceCoffe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HotCoffe"
                        });
                });

            modelBuilder.Entity("Starbucks.Domain.Coffe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Imagen")
                        .HasColumnType("text")
                        .HasColumnName("imagen");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_coffes");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_coffes_category_id");

                    b.ToTable("coffes", (string)null);
                });

            modelBuilder.Entity("Starbucks.Domain.CoffeIngredient", b =>
                {
                    b.Property<Guid>("CoffeId")
                        .HasColumnType("uuid")
                        .HasColumnName("coffe_id");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid")
                        .HasColumnName("ingredient_id");

                    b.HasKey("CoffeId", "IngredientId")
                        .HasName("pk_coffe_ingredient");

                    b.HasIndex("IngredientId")
                        .HasDatabaseName("ix_coffe_ingredient_ingredient_id");

                    b.ToTable("coffe_ingredient", (string)null);
                });

            modelBuilder.Entity("Starbucks.Domain.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_ingredients");

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("Starbucks.Domain.Coffe", b =>
                {
                    b.HasOne("Starbucks.Domain.Category", "Category")
                        .WithMany("Coffes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coffes_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Starbucks.Domain.CoffeIngredient", b =>
                {
                    b.HasOne("Starbucks.Domain.Coffe", "Coffe")
                        .WithMany("CoffeIngredients")
                        .HasForeignKey("CoffeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coffe_ingredient_coffes_coffe_id");

                    b.HasOne("Starbucks.Domain.Ingredient", "Ingredient")
                        .WithMany("CoffeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_coffe_ingredient_ingredients_ingredient_id");

                    b.Navigation("Coffe");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Starbucks.Domain.Category", b =>
                {
                    b.Navigation("Coffes");
                });

            modelBuilder.Entity("Starbucks.Domain.Coffe", b =>
                {
                    b.Navigation("CoffeIngredients");
                });

            modelBuilder.Entity("Starbucks.Domain.Ingredient", b =>
                {
                    b.Navigation("CoffeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
